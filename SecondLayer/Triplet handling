#triplet work
import itertools

triplets = [0.3333, 0.1667, 0.0833, 0.6667, 0.0417, 1.3333]

validTripletSums = [
    (0.125 - 0.002, 0.125 + 0.002),
    (0.25  - 0.002, 0.25  + 0.002),
    (0.5   - 0.002, 0.5   + 0.002),
    (1.0   - 0.002, 1.0   + 0.002),
    (2.0   - 0.002, 2.0   + 0.002),
    (4.0   - 0.002, 4.0   + 0.002),
]

def isValidTriplet(sumValue):
    for lower, upper in validTripletSums:
        if lower <= sumValue <= upper:
            return True
    return False

def allValidTriplets(baseDurations):
    validCombinations = []
    for r in range(1, len(baseDurations) + 1):
        for combo in itertools.combinations_with_replacement(baseDurations, r):
            if isValidTriplet(sum(combo)):
                validCombinations.append(combo)
    return validCombinations

def cleanTriplets(durations, triplets, keepTriplets=True):
  index = 0
  while index < len(durations):
    if durations[index] in triplets:
      if not keepTriplets:
        del durations[index]
        continue
      tripletList = []
      startIndex = index
      while index < len(durations) and durations[index] in triplets:
        tripletList.append(durations[index])
        index += 1
      jump = indexJump(tripletList)
      del durations[startIndex:startIndex + jump]
      index = startIndex
      keepTriplets = False
    else:
      keepTriplets = True
      index += 1
  return durations

def indexJump(tripletList):
  sumDeleted = 0
  while True:
    found = False
      for windowSize in range(6, 1, -1):
        if len(tripletList) >= windowSize:
          window = tripletList[:windowSize]
          if isValidTriplet(sum(window)):
            sumDeleted += windowSize
            del tripletList[:windowSize]
            found = True
            break
    if not found:
      break
  return sumDeleted

"""
validTriplets = [(0.3333, 0.1667), (0.3333, 0.6667), (0.1667, 0.0833),
  (0.0833, 0.0417), (0.6667, 1.3333), (0.3333, 0.3333, 0.3333),
  (0.3333, 0.3333, 1.3333), (0.3333, 0.0833, 0.0833), (0.1667, 0.1667, 0.1667),
  (0.1667, 0.1667, 0.6667), (0.1667, 0.0417, 0.0417), (0.0833, 0.0833, 0.0833),
  (0.6667, 0.6667, 0.6667), (0.0417, 0.0417, 0.0417), (1.3333, 1.3333, 1.3333),
  (0.3333, 0.3333, 0.1667, 0.1667), (0.3333, 0.3333, 0.6667, 0.6667),
  (0.3333, 0.1667, 0.1667, 1.3333), (0.3333, 0.0833, 0.0417, 0.0417),
  (0.1667, 0.1667, 0.0833, 0.0833), (0.1667, 0.0833, 0.0833, 0.6667),
  (0.0833, 0.0833, 0.0417, 0.0417), (0.6667, 0.6667, 1.3333, 1.3333),
  (0.3333, 0.3333, 0.3333, 0.3333, 0.6667), (0.3333, 0.3333, 0.1667, 0.0833, 0.0833),
  (0.3333, 0.3333, 0.6667, 1.3333, 1.3333), (0.3333, 0.1667, 0.1667, 0.1667, 0.1667),
  (0.3333, 0.1667, 0.1667, 0.6667, 0.6667), (0.3333, 0.1667, 0.0833, 0.0833, 1.3333),
  (0.3333, 0.0417, 0.0417, 0.0417, 0.0417), (0.1667, 0.1667, 0.1667, 0.1667, 1.3333),
  (0.1667, 0.1667, 0.0833, 0.0417, 0.0417), (0.1667, 0.0833, 0.0833, 0.0833, 0.0833),
  (0.1667, 0.0833, 0.6667, 0.0417, 0.0417), (0.0833, 0.0833, 0.0833, 0.0833, 0.6667),
  (0.0833, 0.0417, 0.0417, 0.0417, 0.0417), (0.6667, 0.6667, 0.6667, 0.6667, 1.3333),
  (0.3333, 0.3333, 0.3333, 0.3333, 0.3333, 0.3333), (0.3333, 0.3333, 0.3333, 0.3333, 1.3333, 1.3333),
  (0.3333, 0.3333, 0.3333, 0.1667, 0.1667, 0.6667), (0.3333, 0.3333, 0.1667, 0.0833, 0.0417, 0.0417),
  (0.3333, 0.3333, 0.0833, 0.0833, 0.0833, 0.0833), (0.3333, 0.3333, 0.6667, 0.6667, 0.6667, 1.3333),
  (0.3333, 0.1667, 0.1667, 0.1667, 0.0833, 0.0833), (0.3333, 0.1667, 0.1667, 0.6667, 1.3333, 1.3333),
  (0.3333, 0.1667, 0.0833, 0.0833, 0.6667, 0.6667), (0.3333, 0.1667, 0.0833, 0.0417, 0.0417, 1.3333),
  (0.3333, 0.0833, 0.0833, 0.0833, 0.0833, 1.3333), (0.1667, 0.1667, 0.1667, 0.1667, 0.1667, 0.1667),
  (0.1667, 0.1667, 0.1667, 0.1667, 0.6667, 0.6667), (0.1667, 0.1667, 0.1667, 0.0833, 0.0833, 1.3333),
  (0.1667, 0.1667, 0.0417, 0.0417, 0.0417, 0.0417), (0.1667, 0.0833, 0.0833, 0.0833, 0.0417, 0.0417),
  (0.1667, 0.6667, 0.0417, 0.0417, 0.0417, 0.0417), (0.0833, 0.0833, 0.0833, 0.0833, 0.0833, 0.0833),
  (0.0833, 0.0833, 0.0833, 0.6667, 0.0417, 0.0417), (0.6667, 0.6667, 0.6667, 0.6667, 0.6667, 0.6667),
  (0.0417, 0.0417, 0.0417, 0.0417, 0.0417, 0.0417)]
"""
